#include <stdio.h>
#include <stdlib.h>
int main() {
    struct node{
        int data;
        struct node*left;
        struct node*right;
        int height;
    };
    struct node*create(int val){
        struct node*newNode=(struct node*)malloc(sizeof(struct node));
        newNode->data=val;
        newNode->left=NULL;
        newNode->right=NULL;
        newNode->height=1;
        return newNode;
    }
    // Height of tree
    int height(struct node*root){
        if (root==NULL) return 0;
        else return root->height;
    }
    
    // Balance the TREE
    int balance(struct node*root){
        if (root==NULL) return 0;
         else return height(root->left)-height(root->right);
    }
     int max(int a,int b){
         if (a>b) return a;
          return b;
     }
    // Perform the rotation on TREE
    
    struct node*rrotate(struct node*A){
        struct node*B=A->left;
        struct node*L2=B->right;
        
        B->right =A;
        A->left=L2;
        
        // Updated Height of AVL Tree
        A->height= max(height(A->left),height(A->right))+1 ;
        
        B->height= max(height(B->left),height(B->right))+1;
    }
    struct node*lrotate(struct node*A){
        struct node*B=A->right;
        struct node*L2=B->left;
        
        B->left=A;
        A->right=L2;
        //Updated Height of AVL TREE
        A->height= max(height(A->left),height(A->right))+1 ;
        
        B->height= max(height(B->left),height(B->right))+1;
    }
    
    // INsert NOde IN Avl tree....
    
        struct node*insert(struct node*root,int val){
            if (root ==NULL) return (create(val));
            
            if (val < root->data)
                root ->left= insert(root->left,val);
            else 
            root->right= insert(root->right,val);
            
            root->height=1+ max(height(root->left),height(root->right));
            int bal =balance(root);
             
             if (bal>1 && val<root->left->data)
             return rrotate(root);
             if (bal<-1 && val>root->right->data)
            return lrotate(root);
            if (bal>1 && val>root->left->data)
            {
            root->left =lrotate(root->left);
            return rrotate(root);
            }
            if (bal<-1 && val<root->right->data)
            {
            root->right=rrotate(root->right);
            return lrotate(root);
            }
            return root;
            
        }
        void inOrder(struct node * root){
        if (root==NULL) return;
        inOrder(root->left);
        printf("%d->",root->data);
        inOrder(root->right);
    }
   
    struct node * root = NULL;
   
    root = insert(root, 6);
    root = insert(root, 5);
    root = insert(root, 7);
    root = insert(root, 4);
    root = insert(root, 1);
   
    inOrder(root);
    printf("NULL\n");

    return 0;
}
